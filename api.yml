swagger: '2.0'

info:
  version: '1.0.0'
  title: Cookbook
  description: Simple BLOBA for storing and accessing recipes

schemes:
  - http
basePath: /v1

paths:
  /recipes:
    get:
      summary: Get all recipes
      description: Get a list of all recipes visible to the current user
      parameters:
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/count'
      responses:
        200:
          description: A list of Recipes
          schema:
            $ref: '#/definitions/Recipes'
        403:
          description: Current user does not have permission to view recipes
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a new recipe
      description: Create a new recipe for the current user
      parameters:
        - name: recipe
          in: body
          description: The recipe to be added
          schema:
            $ref: '#/definitions/Recipe'
      responses:
        200:
          description: Recipe successfully created
          schema:
            location:
              type: String
              description: URI of newly created resource
        403:
          description: Current user does not have permission to create a recipe
          schema:
            $ref: '#/definitions/Error'
  /recipes/{recipe-id}:
    parameters:
      - $ref: '#/parameters/recipe-id'
    get:
      summary: Get a single recipe
      description: Get a single recipe
      responses:
        200:
          description: A Recipe
          schema:
            $ref: '#/definitions/Recipe'
        404:
          description: >
            A recipe with that ID does not exist. This API reserves the right to return 404
            instead of 403 to avoid leaking information.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The current user does not have permission to view this recipe
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update this recipe
      description: Update this recipe
      parameters:
        - name: recipe-egg
          in: body
          description: Modified fields from the recipe
          schema:
            $ref: "#/definitions/RecipeEgg"
      responses:
        200:
          description: This recipe with changes accepted
          schema:
            $ref: "#/definitions/Recipe"
    delete:
      summary: Delete this recipe
      description: Delete this recipe
      responses:
        204:
          description: Recipe was successfully deleted
        404:
          description: Recipe by that ID could no be found
          schema:
            $ref: "#/definitions/Error"


definitions:
  Recipe:
    properties:
      name:
        type: string
        minLength: 1
      ingredients:
        $ref: "#/definitions/Ingredients"
      instructions:
        type: string
      tags:
        $ref: "#/definitions/Tags"
      summary:
        type: string
      description:
        type: string
    required:
      - name
      - summary
      - ingredients
      - tags
      - instructions
  Recipes:
    type: array
    items:
      $ref: "#/definitions/Recipe"
  RecipeEgg:
      properties:
        name:
          type: string
          minLength: 1
        ingredients:
          $ref: "#/definitions/Ingredients"
        instructions:
          type: string
        tags:
          type: "#/definitions/Tags"
        summary:
          type: string
        description:
          type: string
  Ingredients:
    type: array
    items:
      type: string
  Tags:
    type: array
    uniqueItems: true
    items:
      type: string
  Error:
    properties:
      error:
        type: string
      errorDescription:
        type: string
      errorUri: 
        type: string
    required:
      - error
      - errorDescription

parameters:
  recipe-id:
    name: recipe-id
    in: path
    required: true
    description: UUID of requested recipe
    type: string
  start:
    name: start
    in: query
    description: Start index (1-based, inclusive) for pagination
    type: integer
    minimum: 1
  count:
    name: count
    in: query
    description: Maximum number of items to be returned for paginated
    type: integer
    minimum: 1
